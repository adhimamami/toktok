name: RDP via Ngrok

on: [push, workflow_dispatch]

jobs:
  enable_rdp:
    runs-on: windows-latest

    steps:
      - name: 🔽 Download & Extract Ngrok
        run: |
          Write-Host "🚀 Downloading Ngrok..."
          curl -Lo ngrok.zip https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip
          Expand-Archive -Path "ngrok.zip" -DestinationPath "ngrok" -Force
        shell: pwsh

      - name: 🔑 Authenticate Ngrok
        run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        shell: pwsh

      - name: 🎛 Enable Remote Desktop & Firewall
        run: |
          Write-Host "🔓 Enabling RDP..."
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        shell: pwsh

      - name: 🛠 Set RDP Password
        run: |
          $password = ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force
          Set-LocalUser -Name "runneradmin" -Password $password
        shell: pwsh

      - name: 🚀 Start Ngrok Tunnel for RDP
        run: Start-Process -NoNewWindow -FilePath ".\ngrok\ngrok.exe" -ArgumentList "tcp 3389"
        shell: pwsh

      - name: ⏳ Wait for Ngrok Tunnel and Retrieve RDP URL
        run: |
          Write-Host "Waiting for Ngrok to start..."
          Start-Sleep -Seconds 10
          $maxRetries = 10
          for ($i = 0; $i -lt $maxRetries; $i++) {
            try {
              $response = Invoke-WebRequest -UseBasicParsing -Uri http://127.0.0.1:4040/api/tunnels | ConvertFrom-Json
              $tunnel = $response.tunnels | Where-Object { $_.proto -eq "tcp" }
              if ($tunnel -and $tunnel.public_url) {
                Write-Host "✅ Ngrok tunnel established!"
                Write-Host "🌍 RDP Address: $($tunnel.public_url -replace 'tcp://', '')"
                Write-Host "👤 Username: runneradmin"
                Write-Host "🔑 Password: P@ssw0rd!"
                exit 0
              }
            }
            catch {
              Write-Host "Waiting for Ngrok tunnel... Attempt $($i+1)/$maxRetries"
            }
            Start-Sleep -Seconds 5
          }
          Write-Host "❌ ERROR: Ngrok tunnel not available after retries."
          exit 1
        shell: pwsh

      - name: 🛡 Keep Session Alive
        run: |
          Write-Host "⏳ Keeping session alive..."
          while ($true) { Start-Sleep -Seconds 3600 }
        shell: pwsh
