name: CI

on: 
  - push
  - workflow_dispatch

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Download Ngrok
        run: |
          Invoke-WebRequest -Uri "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip" -OutFile "ngrok.zip"
          Write-Host "Ngrok ZIP downloaded!"
        shell: pwsh

      - name: Extract Ngrok
        run: |
          Expand-Archive -Path "ngrok.zip" -DestinationPath "ngrok"
          Write-Host "Ngrok extracted!"
          Get-ChildItem -Path "ngrok" -Recurse  # Debugging isi folder
        shell: pwsh

      - name: Check Ngrok Executable
        run: |
          if (-Not (Test-Path "ngrok\ngrok.exe")) {
            Write-Host "ERROR: Ngrok executable not found!"
            exit 1
          }
        shell: pwsh

      - name: Set Ngrok Auth Token
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        run: |
          .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
        shell: pwsh

      - name: Enable Remote Desktop (RDP)
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
        shell: pwsh

      - name: Set Admin Password
        run: |
          $password = ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force
          Set-LocalUser -Name "runneradmin" -Password $password
        shell: pwsh

      - name: Create Ngrok Tunnel
        run: |
          .\ngrok\ngrok.exe tcp 3389
        shell: pwsh
