name: RDP with Ngrok - Debugging Version

on:
  push:
  workflow_dispatch:

jobs:
  setup_rdp:
    runs-on: windows-latest

    steps:
      - name: Download Ngrok
        run: |
          Invoke-WebRequest -Uri "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip" -OutFile "ngrok.zip"
          Write-Host "‚úÖ Ngrok ZIP downloaded!"
        shell: pwsh

      - name: Extract Ngrok
        run: |
          Expand-Archive -Path "ngrok.zip" -DestinationPath "ngrok"
          Write-Host "‚úÖ Ngrok extracted!"
        shell: pwsh

      - name: Check Ngrok Executable
        run: |
          if (-Not (Test-Path "ngrok\ngrok.exe")) {
            Write-Host "‚ùå ERROR: Ngrok executable not found!"
            exit 1
          } else {
            Write-Host "‚úÖ Ngrok executable found!"
          }
        shell: pwsh

      - name: Set Ngrok Auth Token
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        run: |
          .\ngrok\ngrok.exe config add-authtoken $Env:NGROK_AUTH_TOKEN
          Write-Host "‚úÖ Ngrok authentication successful!"
        shell: pwsh

      - name: Enable RDP and Check Service
        run: |
          Write-Host "üîß Configuring RDP..."
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          # Periksa service RDP
          $service = Get-Service -Name TermService
          if ($service.Status -ne 'Running') {
              Start-Service -Name TermService
              Write-Host "‚úÖ TermService started!"
          } else {
              Write-Host "‚úÖ TermService is already running."
          }
        shell: pwsh

      - name: Create User and Set Password
        run: |
          $username = "RDPUser"
          $password = ConvertTo-SecureString -AsPlainText "P@ssw0rd123!" -Force
          
          if (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
              Write-Host "User '$username' already exists. Updating password..."
              Set-LocalUser -Name $username -Password $password
          } else {
              New-LocalUser -Name $username -Password $password -Description "RDP Access User" -PasswordNeverExpires
              Write-Host "User '$username' created."
          }
          
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username
          Write-Host "‚úÖ User created/updated and added to Remote Desktop Users group!"
          Write-Host "üßë‚Äçüíª Username: $username"
          Write-Host "üîë Password: P@ssw0rd123!"
          
          # Debug: Tampilkan daftar user dan anggota group
          Write-Host "Daftar user lokal:"
          Get-LocalUser
          Write-Host "Anggota group 'Remote Desktop Users':"
          Get-LocalGroupMember -Group "Remote Desktop Users"
        shell: pwsh

      - name: Start Ngrok Tunnel and Debug Port 3389
        run: |
          Write-Host "üöÄ Starting Ngrok tunnel..."
          $ngrokProcess = Start-Process -FilePath ".\ngrok\ngrok.exe" -ArgumentList "tcp", "3389" -NoNewWindow -PassThru
          Start-Sleep -Seconds 20

          $ngrok_url = $null
          $attempts = 0
          while (-not $ngrok_url -and $attempts -lt 12) {
              try {
                  $response = Invoke-WebRequest -Uri http://127.0.0.1:4040/api/tunnels -UseBasicParsing -TimeoutSec 5
                  $tunnels = ($response.Content | ConvertFrom-Json).tunnels
                  foreach ($tunnel in $tunnels) {
                      if ($tunnel.public_url -like "tcp://*") {
                          $ngrok_url = $tunnel.public_url
                          break
                      }
                  }
              }
              catch {
                  Write-Host "Waiting for Ngrok tunnel..."
              }
              if (-not $ngrok_url) {
                  Start-Sleep -Seconds 5
                  $attempts++
              }
          }
            
          if (-not $ngrok_url) {
              Write-Host "‚ùå ERROR: Failed to retrieve Ngrok URL after multiple attempts."
              Stop-Process -Id $ngrokProcess.Id
              exit 1
          }

          Write-Host "‚úÖ Ngrok Tunnel Ready!"
          Write-Host "üåç Server Address: $ngrok_url"

          # Debug: Cek apakah port 3389 sedang mendengarkan
          Write-Host "Status port 3389:"
          netstat -an | findstr "3389"
        shell: pwsh

      - name: Keep Alive
        run: |
          Write-Host "üü¢ Keeping session alive..."
          while ($true) { Start-Sleep -Seconds 3600 }
        shell: pwsh
